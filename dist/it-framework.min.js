var IT = IT || {}, base_url = base_url || "", base_events = [ "blur", "change", "click", "dblclick", "focus", "hover", "keydown", "keypress", "keyup", "show", "hide" ], transitionEnd = "webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", animationEnd = "webkitAnimationEnd oanimationend msAnimationEnd animationend";

!function(t) {
    t.fn.serializeObject = function() {
        var e = {};
        return t.each(this.serializeArray(), function(n, a) {
            var s = e[a.name];
            void 0 !== s && null !== s ? t.isArray(s) ? s.push(a.value) : e[a.name] = [ s, a.value ] : e[a.name] = a.value;
        }), e;
    };
}(jQuery), IT.BaseClass = class {
    constructor(t) {
        let e = this;
        e._id = "", e.settings = t || {};
    }
    get className() {
        return this.classname || this.settings.xtype || this.settings.x || void 0;
    }
    get isClass() {
        return !0;
    }
    addEvents(t, e = []) {
        let n = this;
        0 == e.length && Object.keys(t).forEach(n => "function" == typeof t[n] ? e.push(n) : null);
        let a = t.selector || $(n);
        e.forEach(e => a.on(e, t[e] || IT.Utils.emptyFn));
    }
    doEvent(t, e) {
        $(this).trigger(t, e);
    }
    clearEvents(t = {}) {
        t.selector || $(this).off();
    }
}, IT.Component = class extends IT.BaseClass {
    constructor(t) {
        super(t), this.content = null;
    }
    renderTo(t) {
        this.content.appendTo && this.content.appendTo(t);
    }
    get id() {
        return this._id;
    }
    set id(t) {
        this._id = t;
    }
    getId() {
        return this.id;
    }
    getContent() {
        return this.content;
    }
    getSetting() {
        return this.settings;
    }
}, IT.Button = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            buttonClass: "",
            iconClass: "",
            enable: !0,
            enableDropdown: !0,
            text: "Tombol",
            items: [],
            css: {}
        }, t), e.id = e.settings.id || IT.Utils.id(), e.enable = e.settings.enable, e.addEvents(e.settings, [ "onClick" ]);
        let n = $("<a/>", {
            id: e.id,
            html: e.settings.text,
            class: "it-btn " + e.settings.buttonClass,
            css: e.settings.css
        });
        if (n.click(function(t) {
            e.enable && ("function" == typeof e.settings.handler && e.settings.handler.call(), 
            e.doEvent("onClick", [ e, e.id ]), t.stopPropagation());
        }), e.settings.iconClass) {
            let t = $("<span/>", {
                class: "fa fa-" + e.settings.iconClass,
                html: "&nbsp;"
            });
            n.prepend(t);
        }
        if (e.content = n, e.settings.enable || e.setEnable(!1), e.settings.items.length) {
            let t = $("<div/>", {
                class: "it-btn-group"
            });
            t.append(e.content);
            let n = new IT.Button({
                iconClass: "angle-down",
                buttonClass: e.settings.buttonClass + " btn-dropdown ",
                text: "",
                handler: function() {
                    e.content.find(".menu-group").toggle(), a.removeClass("menu-reverse"), a.offset().top + a.outerHeight() > $(window).height() && a.addClass("menu-reverse");
                }
            });
            n.setEnable(e.settings.enableDropdown), n.renderTo(t);
            let a = $("<ul/>", {
                class: "menu-group"
            });
            $.each(e.settings.items, function(t, e) {
                if (e) {
                    let t = $("<li/>", {
                        class: "clearfix"
                    });
                    "string" == typeof e ? e = IT.Utils.createObject({
                        xtype: "html",
                        content: $("<div/>", {
                            class: "menu-group-separator"
                        })
                    }) : e.isClass || (e = $.extend(!0, {
                        xtype: "button"
                    }, e), e = IT.Utils.createObject(e)), e.renderTo(t), t.appendTo(a);
                }
            }), t.append(a), e.content = t;
        }
    }
    renderTo(t) {
        super.renderTo(t), this.settings.items.length && $(document).click(function(t) {
            $(t.target).closest(".menu-group").length || $(".menu-group").hide();
        });
    }
    setEnable(t) {
        this.enable = t, this.content[this.enable ? "removeClass" : "addClass"]("btn-disabled");
    }
}, IT.FormItem = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e._readyState = !1, e.addEvents(e.settings, [ "stateChange" ]), e.readyState = !0;
    }
    get readyState() {
        return this._readyState;
    }
    set readyState(t) {
        this._readyState = t, this.doEvent("stateChange", t);
    }
    val(t) {
        return void 0 === t ? this.input.val() : this.input.val(t);
    }
    setInvalid(t = !0) {
        this.input && this.input[t ? "addClass" : "removeClass"]("invalid");
    }
    validate() {
        return !(!this.settings.allowBlank && "" == this.val());
    }
    setReadonly(t = !1) {
        this.input && this.input.attr("readonly", t)[t ? "addClass" : "removeClass"]("input-readonly");
    }
    setEnabled(t = !1) {
        this.input && this.input.attr("disabled", !t)[t ? "removeClass" : "addClass"]("input-disabled");
    }
}, IT.CheckBox = class extends IT.FormItem {
    constructor(t) {
        super(t);
        let e, n = this;
        n.settings = $.extend(!0, {
            x: "checkbox",
            id: "",
            label: "",
            name: "",
            value: "",
            readonly: !1,
            enabled: !0
        }, t), e = n.settings, n.addEvents(n.settings, [ "onChange" ]), n.id = e.id || IT.Utils.id(), 
        n.input = $(`<input id="${n.id}-item" ` + `type='checkbox' ` + `class='it-edit-input' ` + `name='${e.name || IT.Utils.id()}' ` + `${0 == e.allowBlank ? `required` : ""} ` + `${e.readonly ? ` readonly ` : ""} ` + `${0 == e.enabled ? ` disabled ` : ""} ` + `value='${e.value || IT.Utils.id()}' ` + `>`), 
        n.input.on("change", function() {
            n.doEvent("onChange", [ n, this.checked ]);
        }), n.content = $("<div class='it-edit for-option' />").append(n.input).append(`<label for="${n.id}-item" ` + `class='it-input-label it-input-label-${e.labelAlign || "left"}'` + `>${e.label}</label>`), 
        n.readyState = !0;
    }
    get checked() {
        return this.input.is(":checked");
    }
    set checked(t = !0) {
        this.input.prop("checked", t);
    }
}, IT.RecordStore = class extends IT.BaseClass {
    constructor(t) {
        super();
        let e = this;
        e.rawData = t, e.changed = {}, e.field = Object.keys(t);
    }
    isChanged(t = null) {
        return t ? t in this.changed : Object.keys(this.changed).length > 0;
    }
    update(t, e) {
        let n = this;
        if (n.rawData.hasOwnProperty(t)) {
            if (n.rawData[t] !== e) return n.changed[t] = e, !0;
            n.changed[t] && delete n.changed[t];
        } else console.error("Field " + t + " is not exists");
        return !1;
    }
    getChanged(t = null) {
        let e = this;
        return t ? e.isChanged(t) ? e.changed[t] : null : e.isChanged() ? Object.assign({}, e.rawData, e.changed) : null;
    }
    get(t, e) {
        return this.rawData[t];
    }
}, IT.Store = class extends IT.BaseClass {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            type: "json",
            url: "",
            data: [],
            autoLoad: !1,
            params: {
                start: 0,
                limit: 20
            }
        }, t), e.params = e.settings.params, e.data = [], e.total_rows = 0, e.procces = !1, 
        e.addEvents(e.settings, [ "beforeLoad", "afterLoad", "onLoad", "onError", "onEmpty" ]), 
        e.settings.autoLoad && e.load();
    }
    empty() {
        let t = this;
        t.total_rows = 0, t.data = [], t.doEvent("onEmpty", [ t, t.getData(), t.params ]);
    }
    load(t = {}) {
        let e = this;
        switch (e.settings.type) {
          case "ajax":
          case "json":
            e.settings.type = "json";
            var n = $.extend(e.settings.params, t.params);
            e.params = n, e.empty(), $.ajax({
                dataType: e.settings.type,
                type: "POST",
                url: e.settings.url,
                data: n,
                beforeSend: function(t, n) {
                    e.procces = !0, e.total_rows = 0;
                    let a = e.doEvent("beforeLoad", [ e, t, n ]);
                    return void 0 === a || a;
                },
                success: function(t) {
                    void 0 !== t.rows && void 0 !== t.total_rows ? ($.each(t.rows, (t, n) => {
                        e.data.push(new IT.RecordStore(n));
                    }), e.total_rows = t.total_rows, e.doEvent("onLoad", [ e, e.getData(), e.params ])) : e.doEvent("onError", [ e, {
                        status: !1,
                        message: "Format Data Tidak Sesuai"
                    } ]);
                },
                error: function(t, n, a) {
                    e.doEvent("onError", [ e, {
                        status: n,
                        message: a
                    } ]);
                },
                complete: function() {
                    e.procces = !1, e.doEvent("afterLoad", [ e, e.getData() ]);
                }
            });
            break;

          case "array":
            e.total_rows = 0, e.procces = !0;
            let a = e.doEvent("beforeLoad", [ e, e.data || [], null ]);
            void 0 === a || a ? void 0 !== e.settings.data ? ($.each(e.settings.data, (t, n) => {
                e.data.push(new IT.RecordStore(n)), e.total_rows++;
            }), e.doEvent("onLoad", [ e, e.getData(), null ])) : e.doEvent("onError", [ e, {
                status: !1,
                message: "Data JSON '" + e.settings.url + "' Tidak Ditemukan"
            } ]) : (e.empty(), e.doEvent("onError", [ e, {
                status: !1,
                message: "Format Data Tidak Sesuai"
            } ])), e.doEvent("afterLoad", [ e, e.getData() ]), e.procces = !1;
        }
    }
    sort(t, e = !0) {
        throw "Deprecated, doesn't support ordering in front side";
    }
    getParams() {
        return this.params;
    }
    getData() {
        return this.data;
    }
    getRawData() {
        let t = this, e = [];
        return $.each(t.data, (t, n) => {
            e.push(n.rawData);
        }), e;
    }
    getChangedData() {
        let t = this, e = [];
        for (let n in t.data) t.data[n].changed && e.push($.extend({}, t.data[n].data, {
            indexRow: parseInt(n)
        }));
        return e;
    }
    setData(t) {
        let e = this;
        t = "json" == e.type ? t.rows : t, e.empty(), $.each(t, (t, n) => {
            e.data.push(new IT.RecordStore(n)), e.total_rows++;
        }), e.doEvent("onLoad", [ e, e.data, e.params ]);
    }
    getSetting() {
        return this.settings;
    }
    replace(t = {}, e = 0) {
        let n = this;
        for (let a in t) n.data[e].update(a, t[a]);
    }
}, IT.DataTable = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        if (e.settings = $.extend(!0, {
            id: "",
            cls: "it-datatable",
            width: "100%",
            height: "",
            cellEditing: !0,
            enableFixedHeader: !0,
            wrap: !1,
            paging: !0,
            store: {
                type: "json",
                params: {
                    start: 0,
                    limit: 20
                }
            },
            columns: [ {} ],
            customHeader: ""
        }, t), e.id = e.settings.id || IT.Utils.id(), e.params = {}, e.selectedRow = null, 
        e.selectedColumn = null, e.editors = [], e.paging = {
            page: 1,
            page_count: 0,
            total_rows: 0
        }, e.addEvents(e.settings, [ "onItemClick", "onItemDblClick", "onLoad", "onChangePage" ]), 
        e.createComponent(), !e.settings.store.isClass) {
            class t extends IT.Store {
                load(t) {
                    let n = !0, a = this;
                    a.doEvent("beforeLoad"), e.editors.forEach(t => {
                        t && t.isClass && (n = n && !!t.readyState);
                    }), n ? super.load(t) : setTimeout(() => {
                        a.load.call(a, t);
                    }, 1e3);
                }
            }
            e.store = new t($.extend(!0, {
                beforeLoad: function() {
                    e.content.find(".it-datatable-wrapper").animate({
                        scrollTop: 0
                    }, "slow"), e.content.find(".it-datatable-loading-overlay").addClass("loading-show");
                },
                afterLoad: function(t, n, a, s) {
                    e.content.find(".it-datatable-loading-overlay").removeClass("loading-show"), e.assignData(n), 
                    e.doEvent("onLoad", [ e, n ]);
                },
                onEmpty: function(t, n, a, s) {
                    e.assignData(n), e.doEvent("onLoad", [ e, n ]), e.content.find(".it-datatable-loading-overlay").removeClass("loading-show");
                }
            }, e.settings.store)), t = null, e.params = e.store.params;
        }
    }
    createComponent() {
        let t = this, e = t.settings;
        t.content = $("<div />", {
            id: t.id,
            class: e.cls
        }).width(e.width).height(e.height);
        let n = $(`<div class="it-datatable-wrapper"/>`), a = $(`<div class="it-datatable-fixed-header"/>`), s = $(`<table width='100%' />`), i = $(`<thead />`), o = $(`<tbody />`);
        if (t.content.append(n.append(s.append(i))), e.customHeader) i.append($(e.customHeader)); else {
            let n, a = $(`<tr/>`);
            for (let s = 0; s < e.columns.length; s++) n = e.columns[s], a.append($(`<th />`, {
                css: {
                    "min-width": n.width,
                    width: n.width
                }
            }).append(n.header)), n.editor && n.editor.store && ("ajax" == n.editor.store.type || "json" == n.editor.store.type) ? t.editors.push(IT.Utils.createObject($.extend(!0, {}, n.editor, {
                width: n.width
            }))) : t.editors.push(n.editor);
            i.append(a);
        }
        if (e.enableFixedHeader && t.content.append(a.append(s.clone())), s.append(o), e.paging) {
            t.content.append(`\n\t\t\t\t<div class="it-datatable-pagination" >\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><button class="it-datatable-icon" data-page="first"><span class="fa fa-step-backward"></span></button></li>\n\t\t\t\t\t\t<li><button class="it-datatable-icon" data-page="back"><span class="fa fa-chevron-left"></span></button></li>\n\t\t\t\t\t\t<li> \n\t\t\t\t\t\t\t<input type="text" class="it-datatable-pagination-current" value="1"> /\n\t\t\t\t\t\t \t<span class="it-datatable-pagination-page">0</span>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li><button class="it-datatable-icon" data-page="next"><span class="fa fa-chevron-right"></span></button></li>\n\t\t\t\t\t\t<li><button class="it-datatable-icon" data-page="last"><span class="fa fa-step-forward"></span></button></li>\n\t\t\t\t\t\t<li >\n\t\t\t\t\t\t\tMenampilkan\n\t\t\t\t\t\t\t<span class='it-datatable-pagination-show'>0</span> \n\t\t\t\t\t\t\tdari\n\t\t\t\t\t\t\t<span class='it-datatable-pagination-count'>0</span> \n\t\t\t\t\t\t\tData\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class='it-datatable-pagination-info'></div>\n\t\t\t\t</div>\n\t\t\t`), 
            t.content.find(".it-datatable-pagination .it-datatable-icon").click(function() {
                if (t.getDataChanged().length) {
                    let e = new IT.MessageBox({
                        type: "question",
                        title: "Konfirmasi",
                        width: 400,
                        message: "Yakin akan menghapus data tersebut ?",
                        buttons: [ {
                            text: "Ya",
                            handler: function() {
                                t.setPage($(this).data("page"));
                            }
                        }, {
                            text: "Tidak",
                            handler: function() {
                                e.close();
                            }
                        } ]
                    });
                } else t.setPage($(this).data("page"));
            }), t.content.find(".it-datatable-pagination .it-datatable-pagination-current").change(function() {
                t.setPage($(this).val());
            });
            let e = $(`\n\t\t\t\t<div class="it-datatable-loading-overlay">\n\t\t\t\t\t<div class="it-loading-rolling"></div>\n\t\t\t\t</div>\n\t\t\t`);
            t.content.append(e);
        }
    }
    assignData(t) {
        let e = this, n = t.getData();
        n.length && e.content.find("table").animate({
            scrollTop: 0
        }, "slow"), e.content.find("tbody").empty();
        let a = e.params.start, s = e.params.limit, i = a + s < t.total_rows ? a + s : t.total_rows, o = t.total_rows > 0 ? a + 1 + "/" + i : "0", l = Math.ceil(t.total_rows / s);
        if (e.paging = Object.assign({}, e.paging, {
            start: a,
            limit: s,
            page_count: l,
            total_rows: t.total_rows
        }), e.content.find(".it-datatable-pagination-show").html(o), e.content.find(".it-datatable-pagination-count").html(t.total_rows), 
        e.content.find(".it-datatable-pagination-page").html(l), 0 == a && e.content.find(".it-datatable-pagination-current").val(1), 
        n.length) for (let t = 0; t < n.length; t++) {
            let a = n[t], s = $("<tr>");
            for (let n = 0; n < e.settings.columns.length; n++) {
                let i = e.settings.columns[n], o = e.settings.columns[n].dataIndex, l = a.get(o), d = i.data || i.renderer || (e.editors[n] && e.editors[n].store ? e.editors[n].store.getRawData() : null) || [], r = IT.Utils.findData(l, d), c = $("<td />", {
                    html: $("<div />", {
                        html: "" == r ? l : r
                    }),
                    valign: i.valign || "top",
                    align: i.align || "left",
                    class: e.settings.wrap ? "wrap" : ""
                }), g = e.editors[n];
                g && (g = g.isClass ? g : IT.Utils.createObject($.extend(!0, {}, i.editor, {
                    width: i.width
                })), c.on("click", function() {
                    e.selectedRow = t, e.selectedColumn = n, e.content.find("tbody tr").removeClass("it-datatable-selected"), 
                    c.parent().addClass("it-datatable-selected"), i.editor.editable && !$(this).hasClass("it-datatable-editing") && (c.find("div").empty(), 
                    c.addClass("it-datatable-editing"), g.val(a.getChanged(o) || a.get(o)), g.input.on("blur", function() {
                        g.validate() && (a.update(o, g.val()), g.input.off(), g.content.detach(), c.removeClass("it-datatable-editing"), 
                        c.find("div").html(IT.Utils.findData(a.getChanged(o) || a.get(o), d)), c[a.isChanged(o) ? "addClass" : "removeClass"]("it-datatable-changed"));
                    }), g.renderTo(c.find("div")), g.input.focus());
                }), "checkbox" == g.className && (g.renderTo(c.find("div")), g.input.focus())), 
                s.append(c);
            }
            e.content.find("tbody").append(s);
        }
    }
    renderTo(t) {
        super.renderTo(t);
        let e = this;
        e.content.find(".it-datatable-wrapper").scroll(function() {
            e.content.find(".it-datatable-fixed-header").scrollLeft($(this).scrollLeft());
        });
    }
    getDataChanged() {
        let t = this, e = [];
        for (let n in t.store.data) t.store.data[n].isChanged() && e.push(t.store.data[n].getChanged());
        return e;
    }
    setPage(t = 1) {
        let e = this;
        if (e.store.getData().length) switch (t) {
          case "first":
            1 != e.paging.page && (e.paging.page = 1, e.loadPage(1));
            break;

          case "last":
            e.paging.page != e.paging.page_count && (e.paging.page = e.paging.page_count, e.loadPage(e.paging.page_count));
            break;

          case "next":
            e.paging.page < e.paging.page_count && (e.paging.page++, e.loadPage(e.paging.page));
            break;

          case "back":
            e.paging.page > 1 && (e.paging.page--, e.loadPage(e.paging.page));
            break;

          default:
            if (!(t >= 1 && t <= e.paging.page_count)) throw alert("Invalid page"), e.content.find(".it-datatable-pagination-current").val(e.paging.page), 
            "Invalid page";
            e.paging.page = t, e.loadPage(t);
        }
    }
    loadPage(t) {
        let e = this, n = (t - 1) * e.paging.limit;
        e.content.find(".it-datatable-pagination .it-datatable-pagination-current").val(t), 
        e.store.load({
            params: {
                start: n,
                limit: e.paging.limit
            }
        });
    }
    getSelectedRecords() {
        let t = this;
        return t.selectedRow ? t.store.data[t.selectedRow] : null;
    }
}, IT.Dialog = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.elExist = !1, e.settings = $.extend(!0, {
            id: "",
            title: "",
            iconCls: "",
            items: [],
            overlay: !0,
            autoShow: !0,
            width: 300,
            height: 100,
            autoHeight: !0,
            cancelable: !1,
            css: {}
        }, t), e.id = e.settings.id || IT.Utils.id(), e.createElement(), e.settings.autoShow && e.show();
    }
    createElement() {
        let t = this;
        if (t.content = $(`\n\t\t\t<div class="it-dialog">\n\t\t\t\t<div class="it-dialog-container">\n\t\t\t\t\t<div class="it-dialog-content"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`), 
        t.settings.title) {
            let e = $("<div/>", {
                class: "it-title",
                html: t.settings.title
            });
            t.settings.iconCls && $("<span/>", {
                class: "fa fa-" + t.settings.iconCls
            }).prependTo(e), t.content.find(".it-dialog-container").prepend(e);
        }
        t.settings.overlay || t.content.addClass("no-overlay"), $.each(t.settings.items, function(e, n) {
            n && (n.isClass || (n = IT.Utils.createObject(n)), n ? n.renderTo(t.content.find(".it-dialog-content")) : console.warn("Xtype: undefined", obj));
        }), t.content.find(".it-dialog-container").css({
            "max-width": t.settings.width
        }), t.content.find(".it-dialog-content").css($.extend(!0, t.settings.css, t.settings.autoHeight ? {
            "min-height": t.settings.height
        } : {
            height: t.settings.height
        })), t.content.appendTo("body").hide(), t.elExist = !0, t.settings.autoShow && t.show(), 
        t.settings.cancelable && (t.content.find(".it-dialog-container").click(function(t) {
            t.stopPropagation();
        }), t.content.click(function() {
            t.close();
        }));
    }
    show() {
        let t = this;
        t.elExist || t.createElement(), t.content.show(0, function() {
            $(this).addClass("dialog-show"), $(this).find(".it-dialog-container").addClass("dialog-show");
        }), $(window).resize(function() {
            t._autoScrollContainer();
        }), t._autoScrollContainer();
    }
    hide() {
        let t = this;
        t.content.find(".it-dialog-container").removeClass("dialog-show").one(transitionEnd, function() {
            t.content.removeClass("dialog-show");
        });
    }
    close() {
        let t = this;
        t.content.find(".it-dialog-container").removeClass("dialog-show").one(transitionEnd, function() {
            t.content.removeClass("dialog-show").one(transitionEnd, function() {
                setTimeout(() => {
                    t.elExist = !1, t.content.remove();
                }, 300);
            });
        });
    }
    _autoScrollContainer() {
        let t = this.content.find(".it-dialog-container"), e = $(window).height();
        e - (t.offset().top + t.outerHeight()) <= 20 ? t.css({
            "overflow-y": "scroll",
            height: e - 30
        }) : t.css({
            "overflow-y": "initial",
            height: "auto"
        });
    }
}, IT.Flex = class extends IT.Component {
    constructor(t) {
        super();
        let e = this;
        if (e.settings = $.extend(!0, {
            id: "",
            title: "",
            iconTitle: "",
            direction: "row",
            wrap: "",
            justifyContent: "",
            css: {},
            alignItems: "",
            alignContent: "",
            items: []
        }, t), e.id = e.settings.id || IT.Utils.id(), e.content = $("<div />", {
            id: e.id,
            class: "it-flex"
        }), e.content.css(e.settings.css || {}), e.content.addClass("it-flex-dir dir-" + e.settings.direction), 
        e.content.addClass("it-flex-wrap wrap-" + e.settings.wrap), e.content.addClass("it-flex-jc jc-" + e.settings.justifyContent), 
        e.content.addClass("it-flex-ai ai-" + e.settings.alignItems), e.content.addClass("it-flex-ac ac-" + e.settings.alignContent), 
        e.settings.title) {
            let t = $("<div/>", {
                class: "it-title",
                html: e.settings.title
            });
            t.prepend($("<span/>", {
                class: "fa" + (e.settings.iconTitle ? " fa-" + e.settings.iconTitle : "")
            })), e.content.append(t);
        }
        $.each(e.settings.items, function(t, n) {
            n && ("function" != typeof n.renderTo && (n = createObject(n)), void 0 !== n.settings.flex && n.content.addClass("it-flex-item"), 
            n.renderTo(e.content));
        });
    }
}, IT.Form = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            url: "",
            items: []
        }, t), e.id = e.settings.id || IT.Utils.id();
        let n, a = $("<div />", {
            id: e.id,
            class: "container-fluid"
        }), s = 0;
        $.each(e.settings.items, function(t, e) {
            e && (n = $("<div>", {
                class: "row"
            }), e.isClass || (e = IT.Utils.createObject(e)), e.renderTo(n), a.append(n), s++);
        }), e.content = $("<form />", {
            name: IT.Utils.id(),
            class: "it-form",
            action: e.settings.url,
            target: e.settings.target
        }), e.content.append(a);
    }
}, IT.Grid = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        if (e.settings = $.extend(!0, {
            id: "",
            type: "row",
            columnRule: "",
            rowContainer: "",
            css: {},
            items: []
        }, t), e.id = e.settings.id || IT.Utils.id(), "row" == e.settings.type) e.content = $("<div/>", {
            id: e.id,
            class: "row"
        }); else {
            if ("column" != e.settings.type) return console.info("Grid hanya mempunyai 2 type : row atau column"), 
            void (e.content = "");
            e.content = $("<div />", {
                id: e.id,
                class: e.settings.columnRule
            });
        }
        e.content.css(e.settings.css), $.each(e.settings.items, function(t, n) {
            n && ("function" != typeof n.renderTo && (n = IT.Utils.createObject(n)), n.renderTo(e.content));
        }), "row" == e.settings.type && "fluid" == e.settings.rowContainer ? e.content = $("<div/>", {
            class: "container-fluid"
        }).append(e.content) : "row" == e.settings.type && "standar" == e.settings.rowContainer && (e.content = $("<div/>", {
            class: "container"
        }).append(e.content));
    }
}, IT.HTML = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            url: "",
            content: "",
            css: {},
            class: ""
        }, t), e.id = e.settings.id || IT.Utils.id(), e.content = $("<div/>", {
            id: e.id
        }), e.settings.class && e.content.addClass(e.settings.class), e.content.css(e.settings.css), 
        e.settings.url ? e.content.load(e.settings.url) : e.content.html(e.settings.content);
    }
    setContent(t, e = !1) {
        e && this.content.empty(), "string" == typeof t ? this.content.append(t) : t.appendTo(this.content);
    }
}, IT.MessageBox = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            type: "info",
            title: "Title Here !",
            message: "Message Here !",
            width: 450,
            css: {},
            buttons: [],
            btnAlign: "right",
            autoShow: !0
        }, t), e.id = e.settings.id || IT.Utils.id();
        var n = `\n\t\t\t<div id="${e.id}" class="it-messagebox">\n\t\t\t\t<div class="it-messagebox-container">\n\t\t\t\t\t<div class="it-messagebox-title message-${e.settings.type}">${e.settings.title}</div>\n\t\t\t\t\t<div class="it-messagebox-content">\n\t\t\t\t\t\t<div class="it-messagebox-icon">\n\t\t\t\t\t\t\t<div class="message-icon message-icon-${e.settings.type}"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="it-messagebox-text">\n\t\t\t\t\t\t\t${e.settings.message}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="it-messagebox-btn ${e.settings.btnAlign}"></div>\n\t\t\t\t</div>\n\t\t\t</div>`;
        e.content = $(n), e.content.find(".it-messagebox-container").css($.extend(e.settings.css, {
            "max-width": e.settings.width
        })), 0 == e.settings.buttons.length ? new IT.Button({
            text: "OK",
            handler: function() {
                e.hide();
            }
        }).renderTo(e.content.find(".it-messagebox-btn")) : $.each(e.settings.buttons, function(t, n) {
            "function" != typeof (n = $.extend({
                xtype: "button"
            }, n)).renderTo && (n = IT.Utils.createObject(n)), n.renderTo(e.content.find(".it-messagebox-btn"));
        }), e.content.appendTo("body").hide(), e.settings.autoShow && e.show();
    }
    show() {
        let t = this;
        $("input, select, textarea").blur(), t.content.show(0, function() {
            $(this).addClass("message-show"), $(this).find(".it-messagebox-container").addClass("message-show");
        });
    }
    hide() {
        let t = this;
        t.content.find(".it-messagebox-container").removeClass("message-show").one(transitionEnd, function() {
            t.content.removeClass("message-show").one(transitionEnd, function() {
                setTimeout(() => {
                    t.content.remove();
                }, 300);
            });
        });
    }
    close() {
        this.hide();
    }
}, IT.Select = class extends IT.FormItem {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            value: "",
            emptyText: "",
            format: null,
            defaultValue: "",
            autoLoad: !0,
            allowBlank: !0,
            disabled: !1,
            width: 200,
            store: {
                url: "",
                type: "array",
                data: null
            }
        }, t), e.id = e.settings.id || IT.Utils.id(), e.input = $("<select />", {
            id: e.id,
            name: e.id,
            class: "it-edit-input",
            attr: {
                disabled: e.settings.disabled
            },
            val: e.settings.defaultValue
        }), e.content = $("<div />", {
            class: "it-edit"
        }), e.content.append(e.input), e.settings.width && e.content.css({
            width: e.settings.width
        }), e.addEvents(e.settings, [ "onLoad", "onChange" ]), e.input.on("change", function() {
            e.doEvent("onChange", [ e, e.val() ]);
        }), e.settings.emptyText && !e.settings.autoLoad && e.input.append($("<option/>", {
            val: "",
            text: e.settings.emptyText
        })), e.store = new IT.Store($.extend(!0, {}, e.settings.store, {
            autoLoad: !1
        })), e.store.addEvents({
            beforeLoad: function() {
                e.readyState = !1;
            },
            afterLoad: function(t, n, a) {
                a.forEach(t => {
                    e.input.append($("<option/>", {
                        val: t.rawData.key,
                        text: t.rawData.value,
                        attr: {
                            "data-params": void 0 !== t.rawData.params ? JSON.stringify(t.rawData.params) : ""
                        }
                    }));
                }), e.readyState = !0;
            }
        }), e.settings.autoLoad ? e.getDataStore() : e.readyState = !0;
    }
    getDisplayValue() {
        let t = this;
        return t.getSelect().getItem(t.val())[0].innerHTML;
    }
    setDataStore(t) {
        this.settings.store = t, this.dataStore();
    }
    getDataStore() {
        let t = this;
        t.settings.store;
        t.input.empty(), t.settings.emptyText && t.input.append($("<option/>", {
            val: "",
            text: t.settings.emptyText
        })), t.store.load();
    }
    val(t) {
        return void 0 === t ? this.input.val() : this.input.val(t);
    }
}, IT.Selectize = class extends IT.FormItem {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            value: "",
            emptyText: "",
            format: null,
            defaultValue: "",
            autoLoad: !0,
            allowBlank: !0,
            disabled: !1,
            width: 200,
            store: {
                url: "",
                type: "array",
                data: null
            },
            selectize: {
                allowEmptyOption: !0
            }
        }, t), e.id = e.settings.id || IT.Utils.id(), e.input = $("<select />", {
            id: e.id,
            name: e.id,
            attr: {
                disabled: e.settings.disabled
            },
            val: e.settings.defaultValue
        }), e.content = $("<div />", {
            class: "it-edit"
        }), e.content.append(e.input), e.input.selectize(e.settings.selectize), e.settings.width && e.content.css({
            width: e.settings.width
        }), e.addEvents(e.settings, [ "onLoad", "onChange" ]), e.getSelect().on("change", function() {
            e.doEvent("onChange", [ e, e.val() ]);
        }), e.settings.emptyText && !e.settings.autoLoad && (e.getSelect().addOption({
            value: "",
            text: e.settings.emptyText
        }), e.getSelect().setValue("")), e.store = new IT.Store($.extend(!0, {}, e.settings.store, {
            autoLoad: !1
        })), e.store.addEvents({
            beforeLoad: function() {
                e.readyState = !1;
            },
            afterLoad: function(t, n, a) {
                a.forEach(t => e.getSelect().addOption({
                    value: t.rawData.key,
                    text: t.rawData.value,
                    params: void 0 !== t.rawData.params ? JSON.stringify(t.rawData.params) : ""
                })), e.readyState = !0;
            }
        }), e.settings.autoLoad ? e.getDataStore() : e.readyState = !0;
    }
    getDisplayValue() {
        let t = this;
        return t.getSelect().getItem(t.val())[0].innerHTML;
    }
    setDataStore(t) {
        this.settings.store = t, this.dataStore();
    }
    getDataStore() {
        let t = this, e = (t.settings.store, t.getSelect());
        e.clearOptions(), t.settings.emptyText && (e.addOption({
            value: "",
            text: t.settings.emptyText
        }), e.setValue("")), t.store.load();
    }
    getSelect() {
        return this.input[0].selectize;
    }
    val(t) {
        return void 0 === t ? this.getSelect().getValue() : this.getSelect().setValue(t);
    }
}, IT.Tabs = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            titles: {
                align: "left",
                items: []
            },
            items: [],
            defaultIndexActive: 0,
            height: 100,
            autoHeight: !1
        }, t), e.id = e.settings.id || IT.Utils.id(), e.ids = [], e.content = $(`\n\t\t\t<div id="${e.id}" class="it-tabs">\n\t\t\t\t<ul class="it-tabs-menu ${e.settings.titles.align}"></ul>\n\t\t\t\t<div class="it-tabs-overflow">\n\t\t\t\t\t<span class="btn-overflow"><i class="fa fa-angle-down"></i></span>\n\t\t\t\t\t<ul class="menu-overflow"></ul>\n\t\t\t\t</div>\n\t\t\t\t<div class="it-tabs-container"></div>\n\t\t\t</div>`), 
        e.content.css(e.settings.autoHeight ? "min-height" : "height", e.settings.height), 
        $.each(e.settings.titles.items, function(t, n) {
            let a = IT.Utils.id(), s = $("<li/>", {
                class: "it-tabs-link",
                html: n,
                attr: {
                    "data-tab": a,
                    "data-index": t
                }
            });
            s.appendTo(e.content.find(".it-tabs-menu")), s.click(function() {
                e.setActive($(this).data("index"));
            }), e.ids.push(a);
        }), $.each(e.settings.items, function(t, n) {
            if (n) {
                let a = $("<div/>", {
                    class: "it-tabs-content",
                    id: e.ids[t]
                });
                n.isClass || (n = IT.Utils.createObject(n)), n.renderTo(a), a.appendTo(e.content.find(".it-tabs-container"));
            }
        }), e.content.find(".btn-overflow").click(function() {
            $(this).next().toggle();
        });
    }
    renderTo(t) {
        super.renderTo(t);
        let e = this;
        $(window).resize(function() {
            e._autoShowMore();
        }), e._autoShowMore(), e.setActive(e.settings.defaultIndexActive), setTimeout(() => {
            e._autoShowMore();
        }, 10);
    }
    setActive(t) {
        let e, n = this, a = n.content.find(".it-tabs-menu li").eq(t);
        if (a.length < 1) throw "offset index";
        n.content.find(".tab-active").removeClass("tab-active"), e = a.addClass("tab-active"), 
        n.content.find("#" + e.data("tab")).addClass("tab-active");
    }
    getActive() {
        let t = this.getContent().find(".it-tabs-menu li.tab-active");
        return {
            index: t.index(),
            content: t
        };
    }
    _autoShowMore() {
        let t = this, e = t.content.find(".menu-overflow");
        e.empty();
        let n = t.content.find(".it-tabs-menu li");
        n.show(), n.each(function() {
            $(this).position().left + $(this).outerWidth() > t.content.width() && ($(this).clone(!0).appendTo(e), 
            $(this).hide());
        }), t.content.find(".it-tabs-overflow").toggle(e.children("li").length > 0);
    }
}, IT.TextBox = class extends IT.FormItem {
    constructor(t) {
        super(t);
        let e, n = this;
        switch (n.settings = $.extend(!0, {
            x: "textbox",
            type: "text",
            cols: 19,
            rows: 5,
            maskSettings: {},
            id: "",
            label: "",
            name: "",
            allowBlank: !0,
            value: "",
            placeholder: "",
            readonly: !1,
            enabled: !0,
            length: {
                min: 0,
                max: -1
            },
            size: {
                field: "col-sm-8",
                label: "col-sm-4"
            },
            info: {
                prepend: "",
                append: ""
            }
        }, t), e = n.settings, n.id = e.id || IT.Utils.id(), "" == e.label && (e.size.field = "col-sm-12"), 
        e.type) {
          case "textarea":
            n.input = $(`<textarea style='resize: none;' id="${n.id}-item" ` + `class='it-edit-input' ` + `${0 == e.allowBlank ? `required` : ""} ` + `cols='${e.cols}' ` + `rows='${e.rows}' ` + `${e.readonly ? ` readonly ` : ""} ` + `${0 == e.enabled ? ` disabled ` : ""} ` + `name='${n.settings.name || IT.Utils.id()}' ` + `${e.length.min > 0 ? `minlength='${e.length.min}'` : ""} ` + `${e.length.max > 0 ? `maxlength='${e.length.max}'` : ""} ` + `>${e.value ? `${e.value}` : ""}</textarea>`);
            break;

          case "text":
          case "mask":
            n.input = $(`<input id="${n.id}-item" ` + `type='text' ` + `class='it-edit-input' ` + `name='${n.settings.name || IT.Utils.id()}' ` + `${e.length.min > 0 ? `minlength='${e.length.min}'` : ""} ` + `${e.length.max > 0 ? `maxlength='${e.length.max}'` : ""} ` + `${0 == e.allowBlank ? `required` : ""} ` + `${e.readonly ? ` readonly ` : ""} ` + `${0 == e.enabled ? ` disabled ` : ""} ` + `${e.placeholder ? `placeholder='${e.placeholder}'` : ""} ` + `${e.value ? `value='${e.value}'` : ""} ` + `>`), 
            "mask" == e.type && n.input.inputmask(e.maskSettings || {});
            break;

          default:
            throw "input type unknown";
        }
        n.input.on("focus change blur", function(t) {
            n.setInvalid(!n.validate());
        }), n.input.on("keypress", function(t) {
            13 == t.which && $(this).blur();
        });
        let a = $("<div class='it-edit' />").append(n.input);
        e.info.prepend && a.prepend($("<div />", {
            class: "it-edit-item",
            html: e.info.prepend
        })), e.info.append && a.append($("<div />", {
            class: "it-edit-item",
            html: e.info.append
        })), n.content = $((e.label ? `<div class="${e.size.label}">` + `<label for="${n.id}-item" class='it-input-label it-input-label-${e.labelAlign || "left"}'>${e.label}</label>` + `</div>` : "") + `<div class="${e.size.field}"></div>`), 
        n.content.last().append(a), n.readyState = !0;
    }
}, IT.Toolbar = class extends IT.Component {
    constructor(t) {
        super();
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            position: "top",
            items: []
        }, t), e.id = e.settings.id || IT.Utils.id(), e.content = $(`\n\t\t\t<div id="${e.id}" class="it-toolbar toolbar-${e.settings.position} clearfix">\n\t\t\t\t<ul class="it-toolbar-left"></ul>\n\t\t\t\t<ul class="it-toolbar-right"></ul>\n\t\t\t</div>\n\t\t`), 
        e.ids = [], e.items = {}, $.each(e.settings.items, function(t, n) {
            if (n) {
                let t = $("<li/>");
                n.isClass || (n = IT.Utils.createObject(n)), n.renderTo(t), e.content.find(`.it-toolbar-${n.getSetting().align || "left"}`).append(t), 
                e.ids.push(n.getId()), e.items[n.getId()] = n;
            }
        });
    }
    getItemCount() {
        return this.ids.length;
    }
    getItem(t) {
        return t ? this.items[t] || null : this.items;
    }
}, IT.Utils = class extends IT.BaseClass {
    static createObject(t) {
        let e = t.xtype || t.x, n = {
            button: "Button",
            toolbar: "Toolbar",
            html: "HTML",
            flex: "Flex",
            panel: "Panel",
            form: "Form",
            textbox: "TextBox",
            text: "TextBox",
            checkbox: "CheckBox",
            select: "Select",
            grid: "Grid",
            datatable: "DataTable",
            tabs: "Tabs"
        };
        if (!IT[n[e]]) throw "Class IT." + n[e] + " not found";
        return n[e] && IT[n[e]] ? new IT[n[e]](t) : null;
    }
    static template(t, ...e) {
        return function(...n) {
            var a = n[n.length - 1] || {}, s = [ t[0] ];
            return e.forEach(function(e, i) {
                var o = Number.isInteger(e) ? n[e] : a[e];
                s.push(o, t[i + 1]);
            }), s.join("");
        };
    }
    static id() {
        for (var t = "IT-", e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = 0; n < 5; n++) t += e.charAt(Math.floor(Math.random() * e.length));
        return t;
    }
    static isMoney(t) {
        var e = t.replace(/[$,]/g, "").replace(/\./g, "").replace(/,/g, ".").replace(/\%/g, "");
        return !isNaN(e);
    }
    static isDate(t) {
        var e = new Date(t);
        return !isNaN(e);
    }
    static emptyFn() {}
    static findData(t, e, n = null) {
        let a = t, s = e.getData ? e.getData() : e;
        if (n = $.extend(!0, {
            field: "key",
            look: "value"
        }, n || {}), s.length) for (let e = 0; e < s.length; e++) {
            let i = s[e];
            if (i[n.field] == t) {
                a = i[n.look];
                break;
            }
        }
        return a;
    }
};