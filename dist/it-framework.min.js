/*! it-framework - MIT
Version	: 1.0.2 
Build	: 2017-12-17 07:24:16 
Author	: Kami Technical <kamitechnical@gmail.com>
*/
var IT = IT || {}, transitionEnd = "webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend";

!function(t) {
    t.fn.serializeObject = function() {
        var e = {};
        return t.each(this.serializeArray(), function(n, s) {
            var i = e[s.name];
            void 0 !== i && null !== i ? t.isArray(i) ? i.push(s.value) : e[s.name] = [ i, s.value ] : e[s.name] = s.value;
        }), e;
    };
}(jQuery), IT.BaseClass = class {
    constructor(t) {
        this._id = "", this.settings = t || {};
    }
    get className() {
        return this.classname || this.settings.xtype || this.settings.x || void 0;
    }
    get isClass() {
        return !0;
    }
    addEvents(t, e = []) {
        0 == e.length && Object.keys(t).forEach(n => "function" == typeof t[n] ? e.push(n) : null);
        let n = t.selector || $(this);
        e.forEach(e => n.on(e, t[e] || IT.Utils.emptyFn));
    }
    doEvent(t, e) {
        $(this).trigger(t, e);
    }
    clearEvents(t = {}) {
        t.selector || $(this).off();
    }
    get s() {
        return this.settings;
    }
}, IT.Component = class extends IT.BaseClass {
    constructor(t) {
        super(t);
        this.content = null;
    }
    renderTo(t) {
        this.content.appendTo && this.content.appendTo(t);
    }
    get id() {
        return this._id;
    }
    set id(t) {
        this._id = t;
    }
    getId() {
        return this.id;
    }
    getContent() {
        return this.content;
    }
    getSetting() {
        return this.settings;
    }
}, IT.Button = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            buttonClass: "",
            iconClass: "",
            enable: !0,
            enableDropdown: !0,
            text: "Tombol",
            items: [],
            css: {}
        }, t), e.id = e.settings.id || IT.Utils.id(), e.enable = e.settings.enable, e.addEvents(e.settings, [ "onClick" ]);
        let n = $("<a/>", {
            id: e.id,
            html: e.settings.text,
            class: "it-btn " + e.settings.buttonClass,
            css: e.settings.css
        });
        if (n.click(function(t) {
            e.enable && ("function" == typeof e.settings.handler && e.settings.handler.call(), 
            e.doEvent("onClick", [ e, e.id ]), t.stopPropagation());
        }), e.settings.iconClass) {
            let t = $("<span/>", {
                class: "fa fa-" + e.settings.iconClass,
                html: "&nbsp;"
            });
            n.prepend(t);
        }
        if (e.content = n, e.settings.enable || e.setEnable(!1), e.settings.items.length) {
            let t = $("<div/>", {
                class: "it-btn-group"
            });
            t.append(e.content);
            let n = new IT.Button({
                iconClass: "angle-down",
                buttonClass: e.settings.buttonClass + " btn-dropdown ",
                text: "",
                handler: function() {
                    e.content.find(".menu-group").toggle(), s.removeClass("menu-reverse"), s.offset().top + s.outerHeight() > $(window).height() && s.addClass("menu-reverse");
                }
            });
            n.setEnable(e.settings.enableDropdown), n.renderTo(t);
            let s = $("<ul/>", {
                class: "menu-group"
            });
            $.each(e.settings.items, function(t, e) {
                if (e) {
                    let t = $("<li/>", {
                        class: "clearfix"
                    });
                    "string" == typeof e ? e = IT.Utils.createObject({
                        xtype: "html",
                        content: $("<div/>", {
                            class: "menu-group-separator"
                        })
                    }) : e.isClass || (e = $.extend(!0, {
                        xtype: "button"
                    }, e), e = IT.Utils.createObject(e)), e.renderTo(t), t.appendTo(s);
                }
            }), t.append(s), e.content = t;
        }
    }
    renderTo(t) {
        super.renderTo(t), this.settings.items.length && $(document).click(function(t) {
            $(t.target).closest(".menu-group").length || $(".menu-group").hide();
        });
    }
    setEnable(t) {
        this.enable = t, this.content[this.enable ? "removeClass" : "addClass"]("btn-disabled");
    }
    setText(t) {
        this.content.html(t);
    }
}, IT.Dialog = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.elExist = !1, e.settings = $.extend(!0, {
            id: "",
            title: "",
            iconCls: "",
            items: [],
            footers: [],
            overlay: !0,
            autoShow: !0,
            width: 300,
            height: 100,
            autoHeight: !0,
            cancelable: !1,
            css: {}
        }, t), e.id = e.settings.id || IT.Utils.id(), e.addEvents(e.settings, [ "onShow", "onHide", "onClose" ]), 
        e.ids = [], e.items = {}, e.settings.autoShow ? e.show() : e.createElement();
    }
    createElement() {
        let t = this;
        if (!t.elExist) {
            if (t.content = $('\n\t\t\t<div class="it-dialog">\n\t\t\t\t<div class="it-dialog-container">\n\t\t\t\t\t<div class="it-dialog-header"></div>\n\t\t\t\t\t<div class="it-dialog-content"></div>\n\t\t\t\t\t<div class="it-dialog-footer"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'), 
            t.settings.title) {
                let e = $("<div/>", {
                    class: "it-title",
                    html: t.settings.title
                });
                if (t.settings.iconCls) {
                    $("<span/>", {
                        class: "fa fa-" + t.settings.iconCls
                    }).prependTo(e);
                }
                t.content.find(".it-dialog-header").append(e);
            }
            t.settings.overlay || t.content.addClass("no-overlay"), $.each(t.settings.items, function(e, n) {
                n && (n.isClass || (n = IT.Utils.createObject(n)), n.renderTo(t.content.find(".it-dialog-content")), 
                t.ids.push(n.getId()), t.items[n.getId()] = n);
            }), $.each(t.settings.footers, function(e, n) {
                n && (n.isClass || (n = IT.Utils.createObject(n)), n.renderTo(t.content.find(".it-dialog-footer")), 
                t.ids.push(n.getId()), t.items[n.getId()] = n);
            }), t.content.find(".it-dialog-container").css({
                "max-width": t.settings.width
            }), t.content.find(".it-dialog-content").css($.extend(!0, t.settings.css, t.settings.autoHeight ? {
                "min-height": t.settings.height
            } : {
                height: t.settings.height
            })), t.content.appendTo("body").hide(), t.elExist = !0, t.settings.autoShow && t.show(), 
            t.settings.cancelable && (t.content.find(".it-dialog-container").click(function(t) {
                t.stopPropagation();
            }), t.content.click(function() {
                t.close();
            }));
        }
    }
    getItemCount() {
        return this.ids.length;
    }
    getItem(t) {
        return "number" == typeof t && (t = this.ids[t]), t ? this.items[t] || null : this.items;
    }
    show() {
        let t = this;
        t.createElement(), t.content.show(0, function() {
            $(this).addClass("dialog-show"), $(this).find(".it-dialog-container").addClass("dialog-show");
        }), t.doEvent("onShow", [ t, t.id ]), $(window).resize(function() {
            clearTimeout(window.resizedFinished), window.resizedFinished = setTimeout(function() {
                t.setScroll();
            }, 500);
        }), $(window).trigger("resize");
    }
    hide() {
        let t = this;
        t.content.find(".it-dialog-container").removeClass("dialog-show").one(transitionEnd, function() {
            t.content.removeClass("dialog-show"), t.doEvent("onHide", [ t, t.id ]);
        });
    }
    close() {
        let t = this;
        t.content.find(".it-dialog-container").removeClass("dialog-show").one(transitionEnd, function() {
            t.content.removeClass("dialog-show").one(transitionEnd, function() {
                setTimeout(() => {
                    t.elExist = !1, t.content.remove(), t.doEvent("onClose", [ t, t.id ]);
                }, 700);
            });
        });
    }
    setScroll() {
        this.content.find(".it-dialog-container").height($(window).height() <= this.content.find(".it-dialog-content").height() ? $(window).height() - 50 : "auto");
    }
};