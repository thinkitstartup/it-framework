function makeid() {
    for (var t = "IT-", e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = 0; n < 5; n++) t += e.charAt(Math.floor(Math.random() * e.length));
    return "it-component-" + t;
}

var IT = IT || class {}, base_url = base_url || "", base_events = [ "blur", "change", "click", "dblclick", "focus", "hover", "keydown", "keypress", "keyup", "show", "hide" ], transitionEnd = "webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", animationEnd = "webkitAnimationEnd oanimationend msAnimationEnd animationend";

Array.prototype.remove = function(t, e) {
    var n = $.grep(this, function(n) {
        return n[t] !== e;
    });
    return this.length = 0, this.push.apply(this, n), this;
}, Array.prototype.insert = function(t, e) {
    this.splice(t, 0, e);
}, $.fn.serializeObject = function() {
    var t = {}, e = this.serializeArray();
    return $.each(e, function() {
        void 0 !== t[this.name] ? (t[this.name].push || (t[this.name] = [ t[this.name] ]), 
        t[this.name].push(this.value || "")) : t[this.name] = this.value || "";
    }), t;
}, $.fn.ajaxFileUpload = function(t) {
    var e = {
        params: {},
        action: "",
        onStart: function() {},
        onComplete: function(t) {},
        onCancel: function() {},
        valid_extensions: [ "gif", "png", "jpg", "jpeg" ],
        submit_button: null
    }, n = !1;
    return t && $.extend(e, t), this.each(function() {
        var t = $(this);
        if (!0 !== t.data("ajaxUploader-setup")) {
            t.change(function() {
                n = !1, null == e.submit_button && i();
            }), null == e.submit_button || e.submit_button.click(function() {
                n || i();
            });
            var i = function() {
                if ("" == t.val()) return e.onCancel.apply(t, [ e.params ]);
                var i = t.val().split(".").pop().toLowerCase();
                -1 == $.inArray(i, e.valid_extensions) ? e.onComplete.apply(t, [ {
                    status: !1,
                    message: "The select file type is invalid. File must be " + e.valid_extensions.join(", ") + "."
                }, e.params ]) : (n = !0, o(t), !1 !== e.onStart.apply(t) && t.parent("form").submit(function(t) {
                    t.stopPropagation();
                }).submit());
            };
            t.data("ajaxUploader-setup", !0);
            var s = function(t, i) {
                var s, o = t.contentWindow.document.body.innerHTML;
                try {
                    s = JSON.parse(o);
                } catch (t) {
                    s = o;
                }
                i.siblings().remove(), i.unwrap(), n = !1, e.onComplete.apply(i, [ s, e.params ]);
            }, o = function(t) {
                var n = "ajaxUploader-iframe-" + Math.round(new Date().getTime() / 1e3);
                $("body").after('<iframe width="0" height="0" style="display:none;" name="' + n + '" id="' + n + '"/>'), 
                $("#" + n).load(function() {
                    s(this, t);
                }), t.wrap(function() {
                    return '<form action="' + e.action + '" method="POST" enctype="multipart/form-data" target="' + n + '" />';
                }).after(function() {
                    var t, n = "";
                    for (t in e.params) n += '<input type="hidden" name="' + t + '" value="' + e.params[t] + '" />';
                    return n;
                });
            };
        }
    });
}, $.fn.setCenter = function(t) {
    var e = {
        topBottom: !0,
        leftRight: !0
    }, n = t = $.extend(e, t);
    return this.each(function() {
        var t = $(this);
        n.leftRight && t.css("left", ($(window).width() - $(this).outerWidth()) / 2), n.topBottom && t.css("top", ($(window).height() - $(this).outerHeight()) / 2);
    });
}, IT.BaseClass = class {
    get isClass() {
        return !0;
    }
}, IT.Component = class extends IT.BaseClass {
    constructor(t) {
        super(t);
        let e = this;
        e._id = "", e.settings = {}, e.content = null;
    }
    renderTo(t) {
        this.content.appendTo && this.content.appendTo(domEl);
    }
    get id() {
        return this._id;
    }
    set id(t) {
        this._id = t;
    }
    getId() {
        return this.id;
    }
    getContent() {
        return this.content;
    }
    getSetting() {
        return this.settings;
    }
}, IT.Dialog = class extends IT.Component {
    constructor(t) {
        super();
        let e = this;
        e.elExist = !1, e.settings = $.extend(!0, {
            id: "",
            title: "",
            iconCls: "",
            items: [],
            overlay: !0,
            autoShow: !0,
            width: 300,
            height: 100,
            autoHeight: !0,
            css: {}
        }, t), e.id = e.settings.id || IT.Utils.id(), e.listener = new Listener(e, e.settings, [ "onShow", "onHide", "onClose" ]), 
        e.createElement(), e.settings.autoShow && e.show();
    }
    createElement() {
        let t = this;
        if (t.content = $(`\n\t\t\t<div class="it-dialog">\n\t\t\t\t<div class="it-dialog-container">\n\t\t\t\t\t<div class="it-dialog-content"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`), 
        t.settings.title) {
            let e = $("<div/>", {
                class: "it-title",
                html: t.settings.title
            });
            if (t.settings.iconCls) {
                let n = $("<span/>", {
                    class: "fa fa-" + t.settings.iconCls
                });
                n.prependTo(e);
            }
            t.content.find(".it-dialog-container").prepend(e);
        }
        t.settings.overlay || t.content.addClass("no-overlay"), $.each(t.settings.items, function(e, n) {
            n && (n.isClass || (n = IT.Utils.createObject(n)), n && n.renderTo(t.content.find(".it-dialog-content")));
        }), t.content.find(".it-dialog-container").css({
            "max-width": t.settings.width
        }), t.content.find(".it-dialog-content").css($.extend(!0, t.settings.css, t.settings.autoHeight ? {
            "min-height": t.settings.height
        } : {
            height: t.settings.height
        })), t.content.appendTo("body").hide(), t.elExist = !0, t.settings.autoShow && t.show();
    }
    show() {
        let t = this;
        t.elExist || t.createElement(), t.content.show(0, function() {
            $(this).addClass("dialog-show"), $(this).find(".it-dialog-container").addClass("dialog-show");
        }), t.listener.fire("onShow", [ t, t.id ]), $(window).resize(function() {
            t._autoScrollContainer();
        }), t._autoScrollContainer();
    }
    hide() {
        let t = this;
        t.content.find(".it-dialog-container").removeClass("dialog-show").one(transitionEnd, function() {
            t.content.removeClass("dialog-show"), t.listener.fire("onHide", [ t, t.id ]);
        });
    }
    close() {
        let t = this;
        t.content.find(".it-dialog-container").removeClass("dialog-show").one(transitionEnd, function() {
            t.content.removeClass("dialog-show").one(transitionEnd, function() {
                setTimeout(() => {
                    t.elExist = !1, t.content.remove(), t.listener.fire("onClose", [ t, t.id ]);
                }, 300);
            });
        });
    }
    _autoScrollContainer() {
        let t = this.content.find(".it-dialog-container"), e = $(window).height();
        e - (t.offset().top + t.outerHeight()) <= 20 ? t.css({
            "overflow-y": "scroll",
            height: e - 30
        }) : t.css({
            "overflow-y": "initial",
            height: "auto"
        });
    }
}, IT.Form = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            items: []
        }, t), e.id = e.settings.id || makeid();
        let n, i = $("<div />", {
            id: e.id,
            class: "container-fluid"
        }), s = 0;
        $.each(e.settings.items, function(t, e) {
            e && (n = $("<div>", {
                class: "row"
            }), e.isClass || (e = IT.Utils.createObject(e)), e.renderTo(n), i.append(n), s++);
        }), e.content = $("<form />", {
            name: IT.Utils.id(),
            class: "it-form"
        }), e.content.append(i);
    }
};

class Listener {
    constructor(t, e, n = []) {
        let i = this;
        i.events = {}, i.scope = t, n.forEach(t => i.events[t] = e[t]);
    }
    fire(t, e) {
        var n = this;
        "function" == typeof n.events[t] && n.events[t].apply(n.scope, e);
    }
    set(t) {}
}

IT.TextBox = class extends IT.Component {
    constructor() {}
}, IT.Utils = class extends IT.BaseClass {
    constructor(t) {
        super(t);
    }
    static createObject(t) {
        let e = t.xtype || t.x, n = {
            button: "Button",
            toolbar: "Toolbar",
            html: "HTML",
            flex: "Flex",
            panel: "Panel",
            form: "Form",
            textbox: "TextBox",
            checkbox: "CheckBox",
            select: "Select",
            grid: "Grid",
            tabs: "Tabs"
        };
        if (!IT[n[e]]) throw "Class IT." + n[e] + " not found";
        return n[e] && IT[n[e]] ? new IT[n[e]](t) : null;
    }
    static template(t, ...e) {
        return function(...n) {
            var i = n[n.length - 1] || {}, s = [ t[0] ];
            return e.forEach(function(e, o) {
                var a = Number.isInteger(e) ? n[e] : i[e];
                s.push(a, t[o + 1]);
            }), s.join("");
        };
    }
    static id() {
        for (var t = "IT-", e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = 0; n < 5; n++) t += e.charAt(Math.floor(Math.random() * e.length));
        return t;
    }
};