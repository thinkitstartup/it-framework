var IT = IT || {}, base_url = base_url || "", base_events = [ "blur", "change", "click", "dblclick", "focus", "hover", "keydown", "keypress", "keyup", "show", "hide" ], transitionEnd = "webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", animationEnd = "webkitAnimationEnd oanimationend msAnimationEnd animationend";

IT.BaseClass = class {
    get isClass() {
        return !0;
    }
}, IT.Component = class extends IT.BaseClass {
    constructor(t) {
        super(t);
        let e = this;
        e._id = "", e.settings = t || {}, e.content = null;
    }
    renderTo(t) {
        this.content.appendTo && this.content.appendTo(t);
    }
    get id() {
        return this._id;
    }
    set id(t) {
        this._id = t;
    }
    getId() {
        return this.id;
    }
    getContent() {
        return this.content;
    }
    getSetting() {
        return this.settings;
    }
}, IT.Button = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            buttonClass: "",
            iconClass: "",
            enable: !0,
            enableDropdown: !0,
            text: "Tombol",
            items: [],
            css: {}
        }, t), e.id = e.settings.id || IT.Utils.id(), e.enable = e.settings.enable, e.listener = new IT.Listener(e, e.settings, [ "onClick" ]);
        let n = $("<a/>", {
            id: e.id,
            html: e.settings.text,
            class: "it-btn " + e.settings.buttonClass,
            css: e.settings.css
        });
        if (n.click(function(t) {
            e.enable && ("function" == typeof e.settings.handler && e.settings.handler.call(), 
            e.listener.fire("onClick", [ e, e.id ]), t.stopPropagation());
        }), e.settings.iconClass) {
            let t = $("<span/>", {
                class: "fa fa-" + e.settings.iconClass,
                html: "&nbsp;"
            });
            n.prepend(t);
        }
        if (e.content = n, e.settings.enable || e.setEnable(!1), e.settings.items.length) {
            let t = $("<div/>", {
                class: "it-btn-group"
            });
            t.append(e.content);
            let n = new IT.Button({
                iconClass: "angle-down",
                buttonClass: e.settings.buttonClass + " btn-dropdown ",
                text: "",
                handler: function() {
                    e.content.find(".menu-group").toggle(), s.removeClass("menu-reverse"), s.offset().top + s.outerHeight() > $(window).height() && s.addClass("menu-reverse");
                }
            });
            n.setEnable(e.settings.enableDropdown), n.renderTo(t);
            let s = $("<ul/>", {
                class: "menu-group"
            });
            $.each(e.settings.items, function(t, e) {
                if (e) {
                    let t = $("<li/>", {
                        class: "clearfix"
                    });
                    "string" == typeof e ? e = IT.Utils.createObject({
                        xtype: "html",
                        content: $("<div/>", {
                            class: "menu-group-separator"
                        })
                    }) : e.isClass || (e = $.extend(!0, {
                        xtype: "button"
                    }, e), e = IT.Utils.createObject(e)), e.renderTo(t), t.appendTo(s);
                }
            }), t.append(s), e.content = t;
        }
    }
    renderTo(t) {
        super.renderTo(t), this.settings.items.length && $(document).click(function(t) {
            $(t.target).closest(".menu-group").length || $(".menu-group").hide();
        });
    }
    setEnable(t) {
        this.enable = t, this.content[this.enable ? "removeClass" : "addClass"]("btn-disabled");
    }
}, IT.FormItem = class extends IT.Component {
    constructor(t) {
        super(t);
    }
    val(t) {
        return void 0 === t ? this.input.val() : this.input.val(t);
    }
    setInvalid(t = !0) {
        this.input[t ? "addClass" : "removeClass"]("invalid");
    }
    validate() {
        return !(!this.settings.allowBlank && "" == this.val());
    }
    setReadonly(t = !1) {
        this.input.attr("readonly", t)[t ? "addClass" : "removeClass"]("input-readonly");
    }
    setEnabled(t = !1) {
        this.input.attr("disabled", !t)[t ? "removeClass" : "addClass"]("input-disabled");
    }
}, IT.CheckBox = class extends IT.FormItem {
    constructor(t) {
        super(t);
        let e, n = this;
        n.opt = $.extend(!0, {
            x: "optionbox",
            type: "checkbox",
            id: "",
            label: "",
            name: "",
            allowBlank: !0,
            value: 0,
            readonly: !1,
            enabled: !0
        }, t), e = n.opt, n.id = e.id || IT.Utils.id(), "" == e.label && (e.size.field = "col-sm-12"), 
        n.input = $(`<input id="${n.id}-item" ` + `type='${e.type}' ` + `class='it-edit-input' ` + `name='${e.name || IT.Utils.id()}' ` + `${0 == e.allowBlank ? `required` : ""} ` + `${e.readonly ? ` readonly ` : ""} ` + `${0 == e.enabled ? ` disabled ` : ""} ` + `${e.value ? `value='${e.value}'` : ""} ` + `>`), 
        n.content = $("<div class='it-edit for-option' />").append(n.input).append(`<label for="${n.id}-item" class='it-input-label it-input-label-${e.labelAlign || "left"}'>${e.label}</label>`);
    }
}, IT.DataTable = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            cls: "it-grid",
            width: "100%",
            height: "",
            cellEditing: !0,
            wrap: !1,
            paging: !0,
            store: {
                type: "json",
                params: {
                    start: 0,
                    limit: 20,
                    orderBy: "",
                    sortBy: ""
                }
            },
            columns: [ {} ],
            customHeader: ""
        }, t), e.id = e.settings.id || IT.Utils.id(), e.listener = new IT.Listener(e, e.settings, [ "onItemClick", "onItemDblClick", "onLoad", "onChangePage" ]), 
        e.settings.store.isClass || (e.store = new IT.Store($.extend(!0, {
            onLoad: function(t, n, s) {
                e.assignData(n), e.listener.fire("onLoad", [ e, t ]);
            }
        }, e.settings.store))), e.params = e.store.params, e.selectedRecord = null, e.selectedColumn = null, 
        e.paging = {
            total_rows: 0
        }, e.createComponent();
    }
    createComponent() {
        let t = this, e = t.settings;
        t.content = $("<div />", {
            id: t.id,
            class: e.cls
        }).width(e.width).height(e.height);
        let n = $(`<div class="it-grid-wrapper"/>`), s = $(`<div class="it-grid-fixed-header"/>`), i = $(`<table width='${e.width}' height='${e.height}'/>`), a = $(`<thead/>`), o = $(`<tbody/>`);
        if (t.content.append(n.append(i.append(a))), e.customHeader) a.append($(e.customHeader)); else {
            let t, n = $(`<tr/>`);
            for (let s = 0; s < e.columns.length; s++) t = e.columns[s], n.append($(`<th />`, {
                css: {
                    "min-width": t.width,
                    width: t.width
                }
            }).append(t.header));
            a.append(n);
        }
        t.content.append(s.append(i.clone())), i.append(o), e.paging && t.content.append(`\n\t\t\t\t<div class="it-grid-pagination" >\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><button class="it-grid-icon" rel="first"><span class="fa fa-step-backward"></span></button></li>\n\t\t\t\t\t\t<li><button class="it-grid-icon" rel="back"><span class="fa fa-chevron-left"></span></button></li>\n\t\t\t\t\t\t<li> \n\t\t\t\t\t\t\t<input type="text" class="it-grid-pagination-current" value="1"> /\n\t\t\t\t\t\t \t<span class="it-grid-pagination-page"></span>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li><button class="it-grid-icon" rel="next"><span class="fa fa-chevron-right"></span></button></li>\n\t\t\t\t\t\t<li><button class="it-grid-icon" rel="last"><span class="fa fa-step-forward"></span></button></li>\n\t\t\t\t\t\t<li >\n\t\t\t\t\t\t\tMenampilkan\n\t\t\t\t\t\t\t<span class='it-grid-pagination-show'></span> \n\t\t\t\t\t\t\tdari\n\t\t\t\t\t\t\t<span class='it-grid-pagination-count'></span> \n\t\t\t\t\t\t\tData\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class='it-grid-pagination-info'></div>\n\t\t\t\t</div>\n\t\t\t`);
    }
    assignData(t) {
        let e = this;
        if (t && t.rows) {
            e.content.find("tbody").empty();
            let n = t.total_rows, s = e.params.start, i = e.params.limit, a = s + i < n ? s + i : n, o = n > 0 ? s + 1 + "/" + a : "0", l = Math.ceil(n / i);
            e.paging = {
                total_rows: n,
                pageCount: l
            }, e.content.find(".it-grid-pagination-show").html(o), e.content.find(".it-grid-pagination-count").html(n), 
            e.content.find(".it-grid-pagination-page").html(l), 0 == s && e.content.find(".it-grid-pagination-current").val(1);
            for (let n = 0; n < t.rows.length; n++) {
                let s = t.rows[n], i = $("<tr>");
                for (let t = 0; t < e.settings.columns.length; t++) {
                    let n = e.settings.columns[t], a = s[e.settings.columns[t].dataIndex];
                    a = a || "", i.append($("<td />", {
                        html: a,
                        valign: n.valign || "top",
                        align: n.align || "left",
                        class: e.settings.wrap ? "wrap" : ""
                    }));
                }
                e.content.find("tbody").append(i);
            }
        }
    }
    renderTo(t) {
        super.renderTo(t);
        let e = this;
        e.content.find(".it-grid-wrapper").scroll(function() {
            e.content.find(".it-grid-fixed-header").scrollLeft($(this).scrollLeft());
        });
    }
}, IT.Dialog = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.elExist = !1, e.settings = $.extend(!0, {
            id: "",
            title: "",
            iconCls: "",
            items: [],
            overlay: !0,
            autoShow: !0,
            width: 300,
            height: 100,
            autoHeight: !0,
            css: {}
        }, t), e.id = e.settings.id || IT.Utils.id(), e.listener = new IT.Listener(e, e.settings, [ "onShow", "onHide", "onClose" ]), 
        e.createElement(), e.settings.autoShow && e.show();
    }
    createElement() {
        let t = this;
        if (t.content = $(`\n\t\t\t<div class="it-dialog">\n\t\t\t\t<div class="it-dialog-container">\n\t\t\t\t\t<div class="it-dialog-content"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`), 
        t.settings.title) {
            let e = $("<div/>", {
                class: "it-title",
                html: t.settings.title
            });
            t.settings.iconCls && $("<span/>", {
                class: "fa fa-" + t.settings.iconCls
            }).prependTo(e), t.content.find(".it-dialog-container").prepend(e);
        }
        t.settings.overlay || t.content.addClass("no-overlay"), $.each(t.settings.items, function(e, n) {
            n && (n.isClass || (n = IT.Utils.createObject(n)), n ? n.renderTo(t.content.find(".it-dialog-content")) : console.warn("Xtype: undefined", obj));
        }), t.content.find(".it-dialog-container").css({
            "max-width": t.settings.width
        }), t.content.find(".it-dialog-content").css($.extend(!0, t.settings.css, t.settings.autoHeight ? {
            "min-height": t.settings.height
        } : {
            height: t.settings.height
        })), t.content.appendTo("body").hide(), t.elExist = !0, t.settings.autoShow && t.show();
    }
    show() {
        let t = this;
        t.elExist || t.createElement(), t.content.show(0, function() {
            $(this).addClass("dialog-show"), $(this).find(".it-dialog-container").addClass("dialog-show");
        }), t.listener.fire("onShow", [ t, t.id ]), $(window).resize(function() {
            t._autoScrollContainer();
        }), t._autoScrollContainer();
    }
    hide() {
        let t = this;
        t.content.find(".it-dialog-container").removeClass("dialog-show").one(transitionEnd, function() {
            t.content.removeClass("dialog-show"), t.listener.fire("onHide", [ t, t.id ]);
        });
    }
    close() {
        let t = this;
        t.content.find(".it-dialog-container").removeClass("dialog-show").one(transitionEnd, function() {
            t.content.removeClass("dialog-show").one(transitionEnd, function() {
                setTimeout(() => {
                    t.elExist = !1, t.content.remove(), t.listener.fire("onClose", [ t, t.id ]);
                }, 300);
            });
        });
    }
    _autoScrollContainer() {
        let t = this.content.find(".it-dialog-container"), e = $(window).height();
        e - (t.offset().top + t.outerHeight()) <= 20 ? t.css({
            "overflow-y": "scroll",
            height: e - 30
        }) : t.css({
            "overflow-y": "initial",
            height: "auto"
        });
    }
}, IT.Form = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            items: []
        }, t), e.id = e.settings.id || IT.Utils.id();
        let n, s = $("<div />", {
            id: e.id,
            class: "container-fluid"
        }), i = 0;
        $.each(e.settings.items, function(t, e) {
            e && (n = $("<div>", {
                class: "row"
            }), e.isClass || (e = IT.Utils.createObject(e)), e.renderTo(n), s.append(n), i++);
        }), e.content = $("<form />", {
            name: IT.Utils.id(),
            class: "it-form"
        }), e.content.append(s);
    }
}, IT.Grid = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        if (e.settings = $.extend(!0, {
            id: "",
            type: "row",
            columnRule: "",
            rowContainer: "",
            css: {},
            items: []
        }, t), e.id = e.settings.id || IT.Utils.id(), "row" == e.settings.type) e.content = $("<div/>", {
            id: e.id,
            class: "row"
        }); else {
            if ("column" != e.settings.type) return console.info("Grid hanya mempunyai 2 type : row atau column"), 
            void (e.content = "");
            e.content = $("<div />", {
                id: e.id,
                class: e.settings.columnRule
            });
        }
        e.content.css(e.settings.css), $.each(e.settings.items, function(t, n) {
            n && ("function" != typeof n.renderTo && (n = IT.Utils.createObject(n)), n.renderTo(e.content));
        }), "row" == e.settings.type && "fluid" == e.settings.rowContainer ? e.content = $("<div/>", {
            class: "container-fluid"
        }).append(e.content) : "row" == e.settings.type && "standar" == e.settings.rowContainer && (e.content = $("<div/>", {
            class: "container"
        }).append(e.content));
    }
}, IT.HTML = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            url: "",
            content: "",
            css: {},
            class: ""
        }, t), e.id = e.settings.id || IT.Utils.id(), e.content = $("<div/>", {
            id: e.id
        }), e.settings.class && e.content.addClass(e.settings.class), e.content.css(e.settings.css), 
        e.settings.url ? e.content.load(e.settings.url) : e.content.html(e.settings.content);
    }
    setContent(t, e = !1) {
        e && this.content.empty(), "string" == typeof t ? this.content.append(t) : t.appendTo(this.content);
    }
}, IT.Listener = class extends IT.BaseClass {
    constructor(t, e, n = []) {
        super();
        let s = this;
        s.events = {}, s.scope = t, n.forEach(t => s.events[t] = e[t]);
    }
    fire(t, e) {
        var n = this;
        if ("function" == typeof n.events[t]) return n.events[t].apply(n.scope, e);
    }
}, IT.Select = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            value: "Button",
            emptyText: "",
            format: null,
            defaultValue: "",
            autoLoad: !0,
            allowBlank: !0,
            disabled: !1,
            width: 200,
            datasource: {
                type: "array",
                url: "",
                data: null
            },
            selectize: {
                allowEmptyOption: !0
            }
        }, t), e.id = e.settings.id || makeid(), e.select = $("<select />", {
            id: e.id,
            name: e.id,
            attr: {
                disabled: e.settings.disabled
            },
            val: e.settings.defaultValue
        }), e.content = $("<div />", {
            class: "it-edit"
        }), e.content.append(e.select), e.select.selectize($.extend(!0, e.settings.selectize)), 
        e.settings.width && e.content.css({
            width: e.settings.width
        }), e.settings.emptyText && e.getSelect().addOption({
            value: "",
            text: e.settings.emptyText
        }), e.settings.autoLoad && e.getDataSource();
    }
    val(t) {
        void 0 === t ? this.getSelect().setValue(t) : this.getSelect().getValue();
    }
    setDataSouce(t) {
        this.settings.datasource = t, this.dataSource();
    }
    getDataSource() {
        let t = this, e = t.settings.datasource, n = t.getSelect();
        switch (n.clear(), e.type) {
          case "array":
            void 0 !== e.data && e.data.length > 0 && $.each(e.data, function(t, e) {
                n.addOption({
                    value: e.key,
                    text: e.value,
                    params: void 0 !== e.params ? JSON.stringify(e.params) : ""
                });
            }), n.setValue(t.settings.defaultValue);
            break;

          case "ajax":
            $.ajax({
                url: e.url,
                type: e.method || "POST",
                data: e.params || {},
                dataType: "json",
                success: function(e) {
                    var s = e.rows;
                    void 0 !== s && s.length > 0 && $.each(s, function(t, e) {
                        n.addOption({
                            value: e.key,
                            text: e.value,
                            params: void 0 !== e.params ? JSON.stringify(e.params) : ""
                        });
                    }), n.setValue(t.settings.defaultValue);
                }
            });
        }
    }
    getSelect() {
        return this.select[0].selectize;
    }
}, IT.Store = class extends IT.BaseClass {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend({
            type: "json",
            url: "",
            autoLoad: !1,
            params: {
                start: 0,
                limit: 20
            }
        }, t), e.params = e.settings.params, e.dataChanged = [], e.storeData = {
            rows: [],
            total_rows: 0
        }, e.listener = new IT.Listener(e, e.settings, [ "beforeLoad", "onLoad", "onError" ]), 
        e.settings.autoLoad && e.load();
    }
    empty() {
        me.dataChanged = [], me.storeData = {
            rows: [],
            total_rows: 0
        };
    }
    load(t) {
        let e = this;
        var t = t || {};
        switch (e.settings.type) {
          case "json":
            var n = $.extend(e.settings.params, t.params);
            e.params = n, e.dataChanged = [], $.ajax({
                dataType: e.settings.type,
                type: "POST",
                url: e.settings.url,
                data: n,
                beforeSend: function(t, n) {
                    return e.listener.fire("beforeLoad", [ e, t, n ]);
                },
                success: function(t) {
                    void 0 !== t.rows && void 0 !== t.total_rows ? (e.storeData = t, e.listener.fire("onLoad", [ e, e.storeData, e.params ])) : (e.storeData = {}, 
                    e.listener.fire("onError", [ e, {
                        status: !1,
                        message: "Format Data Tidak Sesuai"
                    } ]));
                },
                error: function() {
                    e.listener.fire("onError", [ e, {
                        status: !1,
                        message: "Data JSON '" + e.settings.url + "' Tidak Ditemukan"
                    } ]);
                },
                complete: function() {
                    e.listener.fire("afterLoad", [ e, e.storeData ]);
                }
            });
            break;

          case "array":
            e.listener.fire("beforeLoad", [ e, a, b ]), void 0 !== e.settings.data.rows && void 0 !== e.settings.data.total_rows ? (e.storeData = e.settings.data, 
            e.listener.fire("onLoad", [ e, e.storeData, e.params ])) : e.listener.fire("onError", [ e, {
                status: !1,
                message: "Data JSON '" + e.settings.url + "' Tidak Ditemukan"
            } ]), e.listener.fire("afterLoad", [ e, e.storeData ]);
        }
    }
    searchData(t, e) {
        if (index = null, me.storeData.rows && me.storeData.rows.length > 0) for (i = 0; i < me.storeData.rows.length; i++) if (me.storeData.rows[i][t] == e) {
            index = i;
            break;
        }
        return index;
    }
    sort(t, e = !0) {
        throw "Deprecated, doesn't support ordering in front side";
    }
    getParams() {
        return this.params;
    }
    getData() {
        return this.storeData;
    }
    setData(t) {
        this.storeData = t;
    }
    getSetting() {
        return this.settings;
    }
}, IT.Tabs = class extends IT.Component {
    constructor(t) {
        super(t);
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            titles: {
                align: "left",
                items: []
            },
            items: [],
            defaultIndexActive: 0,
            height: 100,
            autoHeight: !1
        }, t), e.id = e.settings.id || IT.Utils.id(), e.ids = [], e.content = $(`\n\t\t\t<div id="${e.id}" class="it-tabs">\n\t\t\t\t<ul class="it-tabs-menu ${e.settings.titles.align}"></ul>\n\t\t\t\t<div class="it-tabs-overflow">\n\t\t\t\t\t<span class="btn-overflow"><i class="fa fa-angle-down"></i></span>\n\t\t\t\t\t<ul class="menu-overflow"></ul>\n\t\t\t\t</div>\n\t\t\t\t<div class="it-tabs-container"></div>\n\t\t\t</div>`), 
        e.content.css(e.settings.autoHeight ? "min-height" : "height", e.settings.height), 
        $.each(e.settings.titles.items, function(t, n) {
            let s = IT.Utils.id(), i = $("<li/>", {
                class: "it-tabs-link",
                html: n,
                attr: {
                    "data-tab": s,
                    "data-index": t
                }
            });
            i.appendTo(e.content.find(".it-tabs-menu")), i.click(function() {
                e.setActive($(this).data("index"));
            }), e.ids.push(s);
        }), $.each(e.settings.items, function(t, n) {
            if (n) {
                let s = $("<div/>", {
                    class: "it-tabs-content",
                    id: e.ids[t]
                });
                n.isClass || (n = IT.Utils.createObject(n)), n.renderTo(s), s.appendTo(e.content.find(".it-tabs-container"));
            }
        }), e.content.find(".btn-overflow").click(function() {
            $(this).next().toggle();
        });
    }
    renderTo(t) {
        super.renderTo(t);
        let e = this;
        $(window).resize(function() {
            e._autoShowMore();
        }), e._autoShowMore(), e.setActive(e.settings.defaultIndexActive), setTimeout(() => {
            e._autoShowMore();
        }, 10);
    }
    setActive(t) {
        let e, n = this, s = n.content.find(".it-tabs-menu li").eq(t);
        if (s.length < 1) throw "offset index";
        n.content.find(".tab-active").removeClass("tab-active"), e = s.addClass("tab-active"), 
        n.content.find("#" + e.data("tab")).addClass("tab-active");
    }
    getActive() {
        let t = this.getContent().find(".it-tabs-menu li.tab-active");
        return {
            index: t.index(),
            content: t
        };
    }
    _autoShowMore() {
        let t = this, e = t.content.find(".menu-overflow");
        e.empty();
        let n = t.content.find(".it-tabs-menu li");
        n.show(), n.each(function() {
            $(this).position().left + $(this).outerWidth() > t.content.width() && ($(this).clone(!0).appendTo(e), 
            $(this).hide());
        }), t.content.find(".it-tabs-overflow").toggle(e.children("li").length > 0);
    }
}, IT.TextBox = class extends IT.FormItem {
    constructor(t) {
        super(t);
        let e, n = this;
        switch (n.settings = $.extend(!0, {
            x: "textbox",
            type: "text",
            cols: 19,
            rows: 5,
            maskSettings: {},
            id: "",
            label: "",
            name: "",
            allowBlank: !0,
            value: "",
            placeholder: "",
            readonly: !1,
            enabled: !0,
            length: {
                min: 0,
                max: -1
            },
            size: {
                field: "col-sm-8",
                label: "col-sm-4"
            },
            info: {
                prepend: "",
                append: ""
            }
        }, t), e = n.settings, n.id = e.id || IT.Utils.id(), "" == e.label && (e.size.field = "col-sm-12"), 
        e.type) {
          case "textarea":
            n.input = $(`<textarea style='resize: none;' id="${n.id}-item" ` + `class='it-edit-input' ` + `${0 == e.allowBlank ? `required` : ""} ` + `cols='${e.cols}' ` + `rows='${e.rows}' ` + `${e.readonly ? ` readonly ` : ""} ` + `${0 == e.enabled ? ` disabled ` : ""} ` + `name='${n.settings.name || IT.Utils.id()}' ` + `${e.length.min > 0 ? `minlength='${e.length.min}'` : ""} ` + `${e.length.max > 0 ? `maxlength='${e.length.max}'` : ""} ` + `>${e.value ? `${e.value}` : ""}</textarea>`);
            break;

          case "text":
          case "mask":
            n.input = $(`<input id="${n.id}-item" ` + `type='text' ` + `class='it-edit-input' ` + `name='${n.settings.name || IT.Utils.id()}' ` + `${e.length.min > 0 ? `minlength='${e.length.min}'` : ""} ` + `${e.length.max > 0 ? `maxlength='${e.length.max}'` : ""} ` + `${0 == e.allowBlank ? `required` : ""} ` + `${e.readonly ? ` readonly ` : ""} ` + `${0 == e.enabled ? ` disabled ` : ""} ` + `${e.placeholder ? `placeholder='${e.placeholder}'` : ""} ` + `${e.value ? `value='${e.value}'` : ""} ` + `>`), 
            "mask" == e.type && n.input.inputmask(e.maskSettings || {});
            break;

          default:
            console.error("input type unknown : " + e.type);
        }
        n.input.on("focus change blur", function(t) {
            n.setInvalid(!n.validate());
        });
        let s = $("<div class='it-edit' />").append(n.input);
        e.info.prepend && s.prepend($("<div />", {
            class: "it-edit-item",
            html: e.info.prepend
        })), e.info.append && s.append($("<div />", {
            class: "it-edit-item",
            html: e.info.append
        })), n.content = $((e.label ? `<div class="${e.size.label}">` + `<label for="${n.id}-item" class='it-input-label it-input-label-${e.labelAlign || "left"}'>${e.label}</label>` + `</div>` : "") + `<div class="${e.size.field}"></div>`), 
        n.content.last().append(s);
    }
}, IT.Toolbar = class extends IT.Component {
    constructor(t) {
        super();
        let e = this;
        e.settings = $.extend(!0, {
            id: "",
            position: "top",
            items: []
        }, t), e.id = e.settings.id || IT.Utils.id(), e.content = $(`\n\t\t\t<div id="${e.id}" class="it-toolbar toolbar-${e.settings.position} clearfix">\n\t\t\t\t<ul class="it-toolbar-left"></ul>\n\t\t\t\t<ul class="it-toolbar-right"></ul>\n\t\t\t</div>\n\t\t`), 
        e.ids = [], e.items = {}, $.each(e.settings.items, function(t, n) {
            if (n) {
                let t = $("<li/>");
                n.isClass || (n = IT.Utils.createObject(n)), n.renderTo(t), e.content.find(`.it-toolbar-${n.getSetting().align || "left"}`).append(t), 
                e.ids.push(n.getId()), e.items[n.getId()] = n;
            }
        });
    }
    getItemCount() {
        return this.ids.length;
    }
    getItem(t) {
        return t ? this.items[t] || null : this.items;
    }
}, IT.Utils = class extends IT.BaseClass {
    constructor(t) {
        super(t);
    }
    static createObject(t) {
        let e = t.xtype || t.x, n = {
            button: "Button",
            toolbar: "Toolbar",
            html: "HTML",
            flex: "Flex",
            panel: "Panel",
            form: "Form",
            textbox: "TextBox",
            checkbox: "CheckBox",
            select: "Select",
            grid: "Grid",
            datatable: "DataTable",
            tabs: "Tabs"
        };
        if (!IT[n[e]]) throw "Class IT." + n[e] + " not found";
        return n[e] && IT[n[e]] ? new IT[n[e]](t) : null;
    }
    static template(t, ...e) {
        return function(...n) {
            var s = n[n.length - 1] || {}, i = [ t[0] ];
            return e.forEach(function(e, a) {
                var o = Number.isInteger(e) ? n[e] : s[e];
                i.push(o, t[a + 1]);
            }), i.join("");
        };
    }
    static id() {
        for (var t = "IT-", e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = 0; n < 5; n++) t += e.charAt(Math.floor(Math.random() * e.length));
        return t;
    }
    static isMoney(t) {
        var e = t.replace(/[$,]/g, "").replace(/\./g, "").replace(/,/g, ".").replace(/\%/g, "");
        return !isNaN(e);
    }
    static isDate(t) {
        var e = new Date(t);
        return !isNaN(e);
    }
};